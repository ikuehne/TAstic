#! /usr/bin/env python3

"""Entry point for the ``tastic`` command-line tool."""

import argparse
import http.client as http
import os
import re
import sys

from tastic.minhash import MinHash
from tastic import client

THRESHOLD_HELP = ("A number from 0 to 1 representing the minimum Jaccard "
                  "coefficient to report a pair of submissions.")
ASSIGNMENT_HELP = ("A Python regex matching the name of the assignment to "
                   "compare.  If provided, directory instead of file names must"
                   " be given as submissions.")
PUSH_HELP = ("If specified, instead of locally comparing the hashes of the "
             "provided submissions submit them to the server at the given "
             "hostname and port.")

def get_assignment(regex, directory):
    """Get a path to an assignment matching ``regex`` in ``directory``.

    If no match found, return ``None``.
    """
    rx = re.compile(regex)
    try:
        for path in os.listdir(directory):
            if rx.match(path):
                return os.path.abspath(os.path.join(directory, path))
    except IOError:
        sys.stderr.write("Error: No such directory found: %s.\n" % directory)
        sys.exit(1)

    return None

def invoke(args, parser):
    """Given the ``Namespace`` parsed out of the arguments, run the program."""
    if args.threshold < 0 or args.threshold > 1:
        parser.print_help()
        sys.exit(1)

    if args.assignment_regex is not None:
        submissions = [get_assignment(args.assignment_regex, s)
                            for s in args.submission]
        submissions = filter(lambda x: x is not None, submissions)
        if not submissions:
            sys.stderr.write("WARNING: No matches found for assignment name.\n")
    else:
        submissions = args.submission

    if args.push is not None:
        (hostname, port) = args.push
        try:
            port = int(port)
        except ValueError:
            sys.stderr.write("Invalid port: %d\n" % port)
            sys.exit(1)
        for infile in submissions:
            client.submit(infile, hostname, port)
        return

    minhashes = {}
    for infile in submissions:
        try:
            with open(infile, 'r') as f:
                minhashes[infile] = MinHash(f)
        except EnvironmentError as e:
            sys.stderr.write("Error opening file: %s.\n" % e)

    for i, (filename1, minhash1) in enumerate(minhashes.items()):
        for filename2, minhash2 in list(minhashes.items())[i + 1:]:
            jaccard = minhash1.jaccard(minhash2)
            if jaccard >= args.threshold:
                print("%s has similarity %g%% with %s." %
                        (filename1, jaccard * 100, filename2))

def main():
    parser = argparse.ArgumentParser(description="Tools for happier TAs.")

    # Cannot specify both a threshold and a server to post to (the threshold is
    # set by the server).
    g = parser.add_mutually_exclusive_group()

    # Add command-line arguments.
    parser.add_argument("submission",
                        nargs="+",
                        help="A list of submissions to compare.",
                        type=str)
    g.add_argument("-t", "--threshold",
                   default=0.25,
                   help=THRESHOLD_HELP,
                   type=float,
                   dest="threshold")
    parser.add_argument("-a", "--assignment",
                        help=ASSIGNMENT_HELP,
                        type=str,
                        dest="assignment_regex")
    g.add_argument("-p", "--push",
                   help=PUSH_HELP,
                   nargs=2,
                   metavar=("hostname", "port"))

    args = parser.parse_args()
    invoke(args, parser)

if __name__ == "__main__":
    main()
